@model IEnumerable<PMTs.DataAccess.Models.KindOfProduct>
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = "Kind of Product";
    ViewData["CreateAction"] = "CreateKindOfProduct";
    ViewData["EditAction"] = "EditKindOfProduct";
    var createModel = new PMTs.DataAccess.ModelView.MaintenanceProductType.MaintenanceProductTypeCreateModel { Status = true };
}

<style>
    .swal-footer {
        text-align: center;
    }
</style>

<br />
<div class="row">
    <div class="col-12">
        <div class="card" style="padding-top:0px;margin-top:0px">

            <div class="card-body">

                <div class="row box">
                    <div class="col-md-6">
                        <h3  class="text-themecolor"><i class="fa fa-cog"></i>&nbsp;@Localizer["Maintenance Kind Of Product"]</h3>
                    </div>
                    <div class="col-md-6">
                        <div class="text-right">
                            <button type="button" class="btn waves-effect waves-light btn-info btn-info" id="btn-create-kop-modal"><span class="btn-label"><i class="fa fa-plus-square text-left"></i></span>@Localizer["Create"]</button>
                        </div>
                    </div>
                </div>

                <partial name="_CreateModal" model="createModel" view-data="@ViewData" />

                <div class="box">
                    <div class="box-body">
                        <table id="tableData" class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th width="8%" scope="col">@Localizer["UID"]</th>
                                    <th width="40%" scope="col">@Localizer["Name"]</th>
                                    <th width="10%" scope="col">@Localizer["Status"]</th>
                                    <th width="12%" scope="col">@Localizer["Created Date"]</th>
                                    <th width="12%" scope="col">@Localizer["Updated Date"]</th>
                                    <th class="text-center" width="10%" scope="col">@Localizer["Options"]</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr>
                                        <td>@item.Id</td>
                                        <td>@item.Name</td>
                                        @if (item.Status.Value)
                                        {
                                            <td style="color:limegreen">@Localizer["Use"]</td>
                                            //ใช้งานอยู่
                                        }
                                        else
                                        {
                                            <td style="color:red">@Localizer["Not Use"]</td>
                                            //ไม่ได้ใช้งาน
                                        }
                                        <td>@item.CreatedDate</td>
                                        <td>@item.UpdatedDate</td>
                                        <td class="text-center">
                                            @{
                                                var UID = item.Id != null ? item.Id : 0;
                                                var Name = item.Name;
                                                var Description = item.Description;
                                                var FormGroup = "";
                                                var HierarchyLv2 = "";
                                                var SortIndex = item.SortIndex.HasValue ? item.SortIndex.Value : 0;
                                                var Status = item.Status.HasValue ? item.Status.Value : true;
                                                var CreatedBy = item.CreatedBy;
                                                var CreatedDate = item.UpdatedDate.HasValue ? Convert.ToDateTime(item.CreatedDate.Value).ToString("dddd dd MMMM yyyy HH:mm:ss") : DateTime.Now.ToString("dddd dd MMMM yyyy HH:mm:ss");
                                                var UpdatedBy = item.UpdatedBy;
                                                var UpdatedDate = item.UpdatedDate.HasValue ? Convert.ToDateTime(item.UpdatedDate.Value).ToString("dddd dd MMMM yyyy HH:mm:ss") : null;
                                            }
                                            <a id="DetailMaterial"
                                               data-UID="@UID"
                                               data-Name="@Name"
                                               data-Description="@Description"
                                               data-FormGroup="@FormGroup"
                                               data-HierarchyLv2="@FormGroup"
                                               data-SortIndex="@SortIndex"
                                               data-Status="@Status"
                                               data-CreatedBy="@CreatedBy"
                                               data-CreatedDate="@CreatedDate"
                                               data-UpdatedBy="@UpdatedBy"
                                               data-UpdatedDate="@UpdatedDate"
                                               onclick="BindKindOfProductView(this)">
                                                <i style="cursor:pointer" class="fas fa-file-alt text-info btn" title="View"></i>
                                            </a>
                                            <a id="EditMaterial"
                                               data-UID="@UID"
                                               data-Name="@Name"
                                               data-Description="@Description"
                                               data-FormGroup="@FormGroup"
                                               data-HierarchyLv2="@FormGroup"
                                               data-SortIndex="@SortIndex"
                                               data-Status="@Status"
                                               data-CreatedBy="@CreatedBy"
                                               data-CreatedDate="@CreatedDate"
                                               data-UpdatedBy="@UpdatedBy"
                                               data-UpdatedDate="@UpdatedDate"
                                               onclick="BindKindOfProductEdit(this)">
                                                <i style="cursor:pointer" class="fas fa-pencil-alt text-warning " title="Edit"></i>
                                            </a>&nbsp;
                                            <a id="DeleteMaterial">  <i style="cursor:pointer" onclick="DeleteKindOfProduct(@item.Id)" data-toggle="tooltip" title="Delete" class="fas fa-trash text-danger"></i></a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <br />
                        <div class="text-right">
                            <a class="btn btn-outline-secondary waves-effect text-center col-md-1" id="backToMaintenanceCategories" href="../MaintenanceCategories">
                            <i class="fas fa-arrow-alt-circle-left"></i>@Localizer["Back"]</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<partial name="_EditModal" model="@createModel" view-data="@ViewData" />

@section Scripts
    {
    <script>
        var StatusEdit = false;
        $(document).ready(function () {

            var kindOfProductTable = $('#tableData').DataTable();

        });

        function DeleteKindOfProduct(id) {

            swal({
                title: "Are you sure?",
                text: "This data will not be visible if you press OK.",
                icon: "warning",
                buttons: {
                    confirm: "Ok",
                    cancel: true,
                },
                dangerMode: false,
            }).then((willDelete) => {
                if (willDelete) {
                    $.ajax({
                        type: 'Post',
                        url: '@Url.Action("DeleteKindOfProduct", "MaintenanceCategories")',
                        data: { Id: id},
                        success: function (res) {
                            if (res.IsSuccess) {
                                $('.modal').modal('hide');
                                $('.modal-backdrop').hide();
                                $("body").removeClass("modal-open");

                                swal("Deleted!", {icon:"success"})
                                    .then(()=> {
                                        window.location.reload(true);
                                    });
                            } else
                            {
                                swal("Failed to delete!", res.ExeptionMessage, { icon: "warning" })
                                    .then(() => {

                                    });
                            }
                        }
                    });
                }

            });
        }

        function CreateCategoriesModel(kindOfAction)
        {
            var form = $('#fromCategoriesCreate')[0];
            var data = new FormData(form);
            let urlAction = '';
            if (kindOfAction == "CreateKindOfProduct")
            {
                urlAction = '@Url.Action("CreateKindOfProduct", "MaintenanceCategories")';
            }
            else if (kindOfAction == "CreateKindOfProductGroup")
            {
                urlAction = '@Url.Action("CreateKindOfProductGroup", "MaintenanceCategories")';
            }
            else if (kindOfAction == "CreateProcessCost")
            {
                urlAction = '@Url.Action("CreateProcessCost", "MaintenanceCategories")';
            }
            else if (kindOfAction == "CreateProductType")
            {
                urlAction = '@Url.Action("CreateProductType", "MaintenanceCategories")';
            }

            $.ajax({
                type: 'POST',
                enctype: 'multipart/form-data',
                url: urlAction,
                data: data,
                async: false,
                processData: false,
                contentType: false,
                cache: false,
                success: function (res) {
                    if (res.IsSuccess) {
                        if (res.ActionType == "create") {
                            swal("Created!", { icon: "success" })
                                .then(() => {
                                    window.location.reload(true);
                                });
                        }
                        else if (res.ActionType == "edit") {
                            swal("Updated!", { icon: "success" })
                                .then(() => {
                                    window.location.reload(true);
                                });
                        }

                    } else {
                        if (res.ActionType == "create") {
                            swal("Failed to create!", res.ExeptionMessage, { icon: "warning" })
                                .then(() => {
                                    $("#UID").focus();
                                });
                        }
                        else if (res.ActionType == "edit") {
                            swal("Failed to updated!", res.ExeptionMessage, { icon: "warning" })
                                .then(() => {
                                    window.location.reload(true);
                                });
                        }
                    }
                },
                error: function () {
                   // return false;
                }
            });
        }

        $("#edit-category-btn").click(function () {
            let data = {
                "UID": $("#UID-edit").val(),
                "Status": StatusEdit,
                "Name": $("#Name-edit").val(),
                "Description": $("#Description-edit").val()
            };

            var formData = JSON.stringify(data);
            let urlAction = '@Url.Action("EditKindOfProduct", "MaintenanceCategories")';

            $.ajax({
                type: 'POST',
                enctype: 'multipart/form-data',
                url: urlAction,
                data: {
                    req: formData.toString()
                },
                async: false,
                datatype: "json",
                success: function (res) {
                    if (res.IsSuccess) {
                        if (res.ActionType == "create") {
                            swal("Created!", { icon: "success" })
                                .then(() => {
                                    window.location.reload(true);
                                });
                        }
                        else if (res.ActionType == "edit") {
                            swal("Updated!", { icon: "success" })
                                .then(() => {
                                    window.location.reload(true);
                                });
                        }

                    } else {
                        if (res.ActionType == "create") {
                            swal("Failed to create!", res.ExeptionMessage, { icon: "warning" })
                                .then(() => {
                                    $("#UID").focus();
                                });
                        }
                        else if (res.ActionType == "edit") {
                            swal("Failed to updated!", res.ExeptionMessage, { icon: "warning" })
                                .then(() => {
                                    window.location.reload(true);
                                });
                        }
                    }
                },
                error: function () {
                    // return false;
                }
            });
        });

        function statusChange(item) {
            var status = $(item);
            if (status.val() == "true") {
                status.attr("style", "background-color:lightgreen");
                StatusEdit = true;
            } else {
                status.attr("style", "background-color:lightcoral");
                StatusEdit = false;
            }
        }

        var onSaveSuccess = function (res) {

            if (res.IsSuccess) {
                if (res.ActionType == "create") {
                    swal("Created!", { icon: "success" })
                        .then(() => {
                            window.location.reload(true);
                        });
                }
                else if (res.ActionType == "edit") {
                    swal("Updated!", { icon: "success" })
                        .then(() => {
                            window.location.reload(true);
                        });
                }

            } else {
                if (res.ActionType == "create") {
                    swal("Failed to create!", res.ExeptionMessage, { icon: "warning" })
                        .then(() => {
                            $("#UID").focus();
                        });
                }
                else if (res.ActionType == "edit") {
                    swal("Failed to updated!", res.ExeptionMessage, { icon: "warning" })
                        .then(() => {
                            window.location.reload(true);
                        });
                }
            }
        };

        function BindKindOfProductView(item)
        {
            $("#UID-view").val($(item).attr("data-UID"));
            $("#Name-view").val($(item).attr("data-Name"));
            $("#Description-view").val($(item).attr("data-Description"));
            $("#FormGroup-view").val($(item).attr("data-FormGroup"));
            $("#HierarchyLv2-view").val($(item).attr("data-HierarchyLv2"));
            $("#SelectHierarchyLv2s-view").val($(item).attr("data-SelectHierarchyLv2s"));
            $("#SelectFormGroups-view").val($(item).attr("data-SelectFormGroups"));
            $("#SortIndex-view").val($(item).attr("data-SortIndex"));
            let status = $(item).attr("data-Status");
            if (status == "True") {
                $("#selectStatusView-active").removeAttr("hidden");
                $("#selectStatusView-inactive").val("true");
                $("#selectStatusView-inactive").attr("hidden", true);
                $("#selectStatusView-active").attr("disabled",true);
            } else
            {
                $("#selectStatusView-inactive").removeAttr("hidden");
                $("#selectStatusView-active").attr("hidden", true);
                $("#selectStatusView-inactive").val("false");
                $("#selectStatusView-inactive").attr("disabled",true);
            }
            $("#CreatedBy-view").val($(item).attr("data-CreatedBy"));
            $("#CreatedDate-view").val($(item).attr("data-CreatedDate"));
            $("#UpdatedBy-view").val($(item).attr("data-UpdatedBy"));
            $("#UpdatedDate-view").val($(item).attr("data-UpdatedDate"));

            $("#modal-category-view").modal("show");
        }

        function BindKindOfProductEdit(item) {
            $("#UID-edit").val($(item).attr("data-UID"));
            $("#Name-edit").val($(item).attr("data-Name"));
            $("#Description-edit").val($(item).attr("data-Description"));
            $("#FormGroup-edit").val($(item).attr("data-FormGroup"));
            $("#HierarchyLv2-edit").val($(item).attr("data-HierarchyLv2"));
            $("#SelectHierarchyLv2s-edit").val($(item).attr("data-SelectHierarchyLv2s"));
            $("#SelectFormGroups-edit").val($(item).attr("data-SelectFormGroups"));
            $("#SortIndex-edit").val($(item).attr("data-SortIndex"));
            let status = $(item).attr("data-Status");
            if (status == "True") {
                $("#selectStatusEdit-active").removeAttr("hidden");
                $("#selectStatusEdit-active").val("true");
                $("#selectStatusEdit-inactive").attr("hidden", true);
                StatusEdit = true;
            } else {
                $("#selectStatusEdit-inactive").removeAttr("hidden");
                $("#selectStatusEdit-inactive").val("false");
                $("#selectStatusEdit-active").attr("hidden", true);
                StatusEdit = false;
            }
            $("#CreatedBy-edit").val($(item).attr("data-CreatedBy"));
            $("#CreatedDate-edit").val($(item).attr("data-CreatedDate"));
            $("#UpdatedBy-edit").val($(item).attr("data-UpdatedBy"));
            $("#UpdatedDate-edit").val($(item).attr("data-UpdatedDate"));
            $("#modal-category-edit").modal("show");
        }

        $('#btn-create-kop-modal').click(function () {
            $('#modal-create-category').modal('show');
        });

        function DisabledSubmitButton(item) {
            item.disabled = true;

            setTimeout(function () {
                item.disabled = false;
            }, 2000);
        }
    </script>
}